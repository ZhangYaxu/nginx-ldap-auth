#!/usr/bin/env python
import base64
import hashlib
import hmac
import json
import string
import random
import time
from collections import namedtuple
from contextlib import contextmanager
from urllib.parse import urlparse

from bottle import abort, redirect, request, response, route, run, \
    static_file, template
import click
import ldap


DEFAULT_SECRET_LENGTH = 32
DEFAULT_SESSION_EXPIRATION = 86400  # session lasts 1 day by default
GROUPS_CACHE_MAX_AGE = 300  # cache user's groups query for 5 minutes


Cookie = namedtuple('Cookie', ['data', 'timestamp'])
GroupsCacheEntry = namedtuple('GroupsCacheEntry', ['entry', 'timestamp'])


config = {
    'ldap': {
        'host': 'ldap.example.com',
        'port': 389,
        'username': 'admin',
        'password': 'password',
        'user_attr': 'mail',
        'user_base_dn': 'ou=users,dc=example,dc=com',
        'group_base_dn': 'ou=groups,dc=example,dc=com',
        'group_cache_max_age': GROUPS_CACHE_MAX_AGE,
    },
    'session': {
        'cookie_session': 'EXAMPLE_COM_SSO',
        'cookie_redirect': 'EXAMPLE_COM_REDIRECT',
        'cookie_domain': '.example.com',
        'cookie_secret': ''.join(
            random.choice(string.ascii_letters + string.digits)
            for _ in range(DEFAULT_SECRET_LENGTH)),
        'cookie_max_age': DEFAULT_SESSION_EXPIRATION,
    },
    'pages': {
        'login_template': './templates/login.html.j2',
        'noauth_template': './templates/noauth.html.j2',
        'static_root': './static',
        'fallback_redirect': 'https://internal.example.com',
    },
}

groups_cache = {}


@contextmanager
def ldap_connection():
    # TODO(kbancerz): add SSL support
    ldap_server = f'ldap://{config["ldap"]["host"]}:{config["ldap"]["port"]}'
    username = config['ldap']['username']
    password = config['ldap']['password']

    ldap_client = ldap.initialize(ldap_server)
    try:
        ldap_client.simple_bind_s(username, password)
        yield ldap_client
    except ldap.INVALID_CREDENTIALS:
        click.echo('Wrong admin username/password')
        raise
    except ldap.SERVER_DOWN:
        click.echo('Could not connect to LDAP')
        raise
    finally:
        ldap_client.unbind()


def ldap_check_authentication(username, password):
    with ldap_connection() as lc:
        ldap_filter = f'({config["ldap"]["user_attr"]}={username})'
        search_result = lc.search_s(
            config['ldap']['user_base_dn'], ldap.SCOPE_SUBTREE, ldap_filter)

    if not search_result:
        click.echo(f'Incorrect credentials: {username}')
        return False

    # TODO(kbancerz): change to bind attempt?
    # get base64-encoded hash of the password from directory
    ldap_password = base64.b64decode(
        search_result[0][1]['userPassword'][0][5:])
    received_password = hashlib.sha1(password.encode('utf-8')).digest()
    if not hmac.compare_digest(ldap_password, received_password):
        click.echo(f'Incorrect credentials: {username}')
        return False

    return True


def ldap_get_group_membership(username):
    # function caches results to make LDAP calls less frequent
    now = int(time.time())
    cache_entry = groups_cache.get(username, None)
    cache_max_age = config['ldap']['group_cache_max_age']

    if (cache_entry is None) or (cache_entry.timestamp + cache_max_age < now):
        with ldap_connection() as lc:
            user_base_dn = config['ldap']['user_base_dn']
            group_base_dn = config['ldap']['group_base_dn']

            # get user's DN
            ldap_filter = f'(mail={username})'
            result = lc.search_s(
                user_base_dn, ldap.SCOPE_SUBTREE, ldap_filter)
            user_dn = result[0][0]

            # find user's groups based on DN
            ldap_filter = f'(|(&(objectClass=*)(uniqueMember={user_dn})))'
            result = lc.search_s(
                group_base_dn, ldap.SCOPE_SUBTREE, ldap_filter, ['cn', ])
            groups = {group[0] for group in result}

        cache_entry = GroupsCacheEntry(groups, now)
        groups_cache[username] = cache_entry

    return cache_entry.entry


@route('/static/<filename>', method='GET')
def server_static(filename):
    return static_file(filename, root=config['pages']['static_root'])


@route('/auth', method='GET')
def auth():
    cookie_session = config['session']['cookie_session']
    cookie_secret = config['session']['cookie_secret']
    cookie_max_age = int(config['session']['cookie_max_age'])

    cookie = request.get_cookie(cookie_session, secret=cookie_secret)
    if not cookie:
        return abort(401, 'Unauthenticated')

    username, timestamp = cookie.rsplit(':', 1)
    if int(timestamp) + cookie_max_age < int(time.time()):
        return abort(401, 'Unauthenticated')

    hdr_allowed_users = request.get_header('X-LDAP-AUTH-USERS')
    hdr_allowed_groups = request.get_header('X-LDAP-AUTH-GROUPS')

    if hdr_allowed_users:
        allowed_users = {x.strip() for x in hdr_allowed_users.split(';')}
        if username not in allowed_users:
            return abort(403, 'Unauthorized')

    if hdr_allowed_groups:
        allowed_groups = {x.strip() for x in hdr_allowed_groups.split(';')}
        user_groups = ldap_get_group_membership(username)
        if not allowed_groups.intersection(user_groups):
            return abort(403, 'Unauthorized')

    return ''


@route('/login', method=('GET', 'POST'))
def login():
    template_file = config['pages']['login_template']

    if request.method == 'GET':
        return template(template_file)

    username = request.forms.get('username')
    password = request.forms.get('password')
    if not ldap_check_authentication(username, password):
        return template(
            template_file,
            error_msg='Incorrect username or password!',
            username=username)

    cookie_session = config['session']['cookie_session']
    cookie_redirect = config['session']['cookie_redirect']
    cookie_secret = config['session']['cookie_secret']
    cookie_max_age = int(config['session']['cookie_max_age'])
    cookie_domain = config['session']['cookie_domain']
    fallback_redirect = config['pages']['fallback_redirect']

    cookie_data = f'{username}:{int(time.time())}'

    response.set_cookie(
        cookie_session, cookie_data, secret=cookie_secret,
        max_age=cookie_max_age, domain=cookie_domain, path='/', httponly=True)

    next_url = request.cookies.get(cookie_redirect) or fallback_redirect
    response.delete_cookie(cookie_redirect, domain=cookie_domain, path='/')

    return redirect(next_url)


@route('/noauth', method='GET')
def no_authorization():
    cookie_session = config['session']['cookie_session']
    cookie_secret = config['session']['cookie_secret']
    cookie_redirect = config['session']['cookie_redirect']
    cookie = request.get_cookie(cookie_session, secret=cookie_secret)

    user = cookie.split(':', 2)[0] if cookie else None
    redirection = request.get_cookie(cookie_redirect)
    if redirection:
        parsed = urlparse(redirection)
        host = parsed.netloc
    else:
        host = None

    return template(config['pages']['noauth_template'], host=host, user=user)


@click.group()
@click.option('--config-file', required=True, type=click.Path(),
              help='configuration file')
@click.pass_context
def nginx_ldap_auth(ctx, config_file):
    """
    nginx LDAP Authentication Server
    """
    ctx.ensure_object(dict)
    ctx.obj['config_file'] = config_file


@nginx_ldap_auth.command()
@click.option('--json-indent', default=4, type=int, help='JSON ident')
@click.pass_context
def get_sample_config(ctx, json_indent):
    """
    Create a sample server configuration file
    """
    global config

    config_file = ctx.obj['config_file']
    with open(config_file, 'w') as f:
        json.dump(config, f, indent=json_indent)


@nginx_ldap_auth.command()
@click.option('--host', default='0.0.0.0', type=str, help='HTTP host')
@click.option('--port', default=8088, type=int, help='HTTP port to open')
@click.pass_context
def run_server(ctx, host, port):
    """
    Run nginx LDAP Authentication Server
    """
    global config

    config_file = ctx.obj['config_file']
    with open(config_file, 'r') as f:
        config = json.load(f)

    run(host=host, port=port)


if __name__ == '__main__':
    nginx_ldap_auth(obj={}, auto_envvar_prefix='NGINX_LDAP_AUTH')
